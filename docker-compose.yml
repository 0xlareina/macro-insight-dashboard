version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cryptosense-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: cryptosense
      POSTGRES_USER: cryptosense
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-cryptosense2024}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - cryptosense-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cryptosense"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: cryptosense-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis2024}
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - cryptosense-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cryptosense-app
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      
      # Database
      DATABASE_URL: postgresql://cryptosense:${POSTGRES_PASSWORD:-cryptosense2024}@postgres:5432/cryptosense
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis2024}
      
      # JWT
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this}
      JWT_EXPIRES_IN: 7d
      
      # API Keys (Set these in .env file)
      BINANCE_API_KEY: ${BINANCE_API_KEY}
      BINANCE_SECRET_KEY: ${BINANCE_SECRET_KEY}
      COINGECKO_API_KEY: ${COINGECKO_API_KEY}
      
    ports:
      - "3001:3001"
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cryptosense-network
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: cryptosense-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - cryptosense-network

networks:
  cryptosense-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local